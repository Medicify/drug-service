{
	"info": {
		"_postman_id": "68ffca58-c283-4ed7-8dce-a9997d37f9ce",
		"name": "Drug Service API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "all drugs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 200 (OK)', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('service should be drug service', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.service).to.equal(\"drug service\");\r",
							"});\r",
							"\r",
							"pm.test('response data should be array', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson.response.data).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct key and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson).to.haveOwnProperty('service');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('request');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('response');\r",
							"    pm.expect(responseJson.response).to.haveOwnProperty('total');\r",
							"    pm.expect(responseJson.response).to.haveOwnProperty('data'); \r",
							"});\r",
							"\r",
							"pm.test(\"status should return success\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.status).equals('success');\r",
							"}) \r",
							"\r",
							"pm.test(\"response data should have correct key\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('id');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('image');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('title');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('product_url');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('description');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('indication');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('dose');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('compotition');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('attention');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('how_to_use');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('side_effect');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('product_class');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('package');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('manufactur');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('bpom');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('indication_contra');\r",
							"}) \r",
							"\r",
							"pm.test(\"response total data should equal to response data length\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.response.total).to.equal(responseJson.response.data.length);\r",
							"}) \r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{host}}:{{port}}/{{endpoint}}/drugs",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"{{endpoint}}",
						"drugs"
					]
				}
			},
			"response": []
		},
		{
			"name": "drug by name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 200 (OK)', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('request should contain key title ', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.request).to.haveOwnProperty(\"title\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test('service should be drug service', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.service).to.equal(\"drug service\");\r",
							"});\r",
							"\r",
							"pm.test('should return object request ', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.request).to.be.an(\"object\");\r",
							"});\r",
							"\r",
							"pm.test('response data should be array', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson.response.data).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct key and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson).to.haveOwnProperty('service');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('request');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('response');\r",
							"    pm.expect(responseJson.response).to.haveOwnProperty('total');\r",
							"    pm.expect(responseJson.response).to.haveOwnProperty('data'); \r",
							"});\r",
							"\r",
							"pm.test(\"status should return success\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.status).equals('success');\r",
							"}) \r",
							"\r",
							"pm.test(\"request title should paracetamol\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.request.title).equals('paracetamol');\r",
							"}) \r",
							"\r",
							"\r",
							"pm.test(\"response data should have correct key\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('id');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('image');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('title');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('product_url');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('description');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('indication');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('dose');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('compotition');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('attention');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('how_to_use');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('side_effect');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('product_class');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('package');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('manufactur');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('bpom');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('indication_contra');\r",
							"}) \r",
							"\r",
							"pm.test(\"response total data should equal to response data length\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.response.total).to.equal(responseJson.response.data.length);\r",
							"}) \r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{host}}:{{port}}/{{endpoint}}/drugs?title={{drugName}}",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"{{endpoint}}",
						"drugs"
					],
					"query": [
						{
							"key": "title",
							"value": "{{drugName}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "drug by category",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 200 (OK)', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('service should be drug service', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.service).to.equal(\"drug service\");\r",
							"});\r",
							"\r",
							"pm.test('should return object request ', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.request).to.be.an(\"object\");\r",
							"});\r",
							"\r",
							"pm.test('request should contain key category ', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.request).to.haveOwnProperty(\"category\");\r",
							"});\r",
							"\r",
							"pm.test('response data should be array', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson.response.data).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct key and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson).to.haveOwnProperty('service');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('request');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('response');\r",
							"    pm.expect(responseJson.response).to.haveOwnProperty('total');\r",
							"    pm.expect(responseJson.response).to.haveOwnProperty('data'); \r",
							"});\r",
							"\r",
							"pm.test(\"status should return success\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.status).equals('success');\r",
							"}) \r",
							"\r",
							"pm.test(\"request title should kaplet\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.request.category).equals('kaplet');\r",
							"}) \r",
							"\r",
							"\r",
							"pm.test(\"response data should have correct key\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('id');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('image');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('title');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('product_url');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('description');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('indication');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('dose');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('compotition');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('attention');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('how_to_use');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('side_effect');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('product_class');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('package');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('manufactur');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('bpom');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('indication_contra');\r",
							"}) \r",
							"\r",
							"pm.test(\"response total data should equal to response data length\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.response.total).to.equal(responseJson.response.data.length);\r",
							"}) \r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{host}}:{{port}}/{{endpoint}}/drugs?category={{category}}",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"{{endpoint}}",
						"drugs"
					],
					"query": [
						{
							"key": "category",
							"value": "{{category}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "drug by category & title",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 200 (OK)', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('service should be drug service', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.service).to.equal(\"drug service\");\r",
							"});\r",
							"\r",
							"pm.test('should return object request ', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.request).to.be.an(\"object\");\r",
							"});\r",
							"\r",
							"pm.test('request should contain key category & title ', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.request).to.haveOwnProperty(\"category\");\r",
							"    pm.expect(responseJson.request).to.haveOwnProperty(\"title\");\r",
							"});\r",
							"\r",
							"pm.test('response data should be array', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson.response.data).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct key and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson).to.haveOwnProperty('service');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('request');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('response');\r",
							"    pm.expect(responseJson.response).to.haveOwnProperty('total');\r",
							"    pm.expect(responseJson.response).to.haveOwnProperty('data'); \r",
							"});\r",
							"\r",
							"pm.test(\"status should return success\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.status).equals('success');\r",
							"}) \r",
							"\r",
							"pm.test(\"request title should kaplet\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.request.category).equals('kaplet');\r",
							"}) \r",
							"\r",
							"\r",
							"pm.test(\"response data should have correct key\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('id');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('image');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('title');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('product_url');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('description');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('indication');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('dose');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('compotition');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('attention');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('how_to_use');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('side_effect');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('product_class');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('package');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('manufactur');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('bpom');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('indication_contra');\r",
							"}) \r",
							"\r",
							"pm.test(\"response total data should equal to response data length\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.response.total).to.equal(responseJson.response.data.length);\r",
							"}) \r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{host}}:{{port}}/{{endpoint}}/drugs?category={{category}}&title={{drugName}}",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"{{endpoint}}",
						"drugs"
					],
					"query": [
						{
							"key": "category",
							"value": "{{category}}"
						},
						{
							"key": "title",
							"value": "{{drugName}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "drug by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 200 (OK)', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('service should be drug service', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.service).to.equal(\"drug service\");\r",
							"});\r",
							"\r",
							"pm.test('should return object request ', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.request).to.be.an(\"object\");\r",
							"});\r",
							"\r",
							"pm.test('response data should be array', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson.response.data).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct key and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson).to.haveOwnProperty('service');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('request');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('response');\r",
							"    pm.expect(responseJson.response).to.haveOwnProperty('total');\r",
							"    pm.expect(responseJson.response).to.haveOwnProperty('data'); \r",
							"});\r",
							"\r",
							"pm.test(\"status should return success\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.status).equals('success');\r",
							"}) \r",
							"\r",
							"pm.test(\"response data should have correct key\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.response.data).to.haveOwnProperty('id');\r",
							"    pm.expect(responseJson.response.data).to.haveOwnProperty('image');\r",
							"    pm.expect(responseJson.response.data).to.haveOwnProperty('title');\r",
							"    pm.expect(responseJson.response.data).to.haveOwnProperty('product_url');\r",
							"    pm.expect(responseJson.response.data).to.haveOwnProperty('description');\r",
							"    pm.expect(responseJson.response.data).to.haveOwnProperty('indication');\r",
							"    pm.expect(responseJson.response.data).to.haveOwnProperty('dose');\r",
							"    pm.expect(responseJson.response.data).to.haveOwnProperty('compotition');\r",
							"    pm.expect(responseJson.response.data).to.haveOwnProperty('attention');\r",
							"    pm.expect(responseJson.response.data).to.haveOwnProperty('how_to_use');\r",
							"    pm.expect(responseJson.response.data).to.haveOwnProperty('side_effect');\r",
							"    pm.expect(responseJson.response.data).to.haveOwnProperty('product_class');\r",
							"    pm.expect(responseJson.response.data).to.haveOwnProperty('package');\r",
							"    pm.expect(responseJson.response.data).to.haveOwnProperty('manufactur');\r",
							"    pm.expect(responseJson.response.data).to.haveOwnProperty('bpom');\r",
							"    pm.expect(responseJson.response.data).to.haveOwnProperty('indication_contra');\r",
							"}) \r",
							"\r",
							"\r",
							"pm.test(\"request should have drug id\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.request).to.haveOwnProperty('id');\r",
							"}) \r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{host}}:{{port}}/{{endpoint}}/drugs/{{drugID}}",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"{{endpoint}}",
						"drugs",
						"{{drugID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "drug page & take (pagination)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 200 (OK)', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('service should be drug service', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.service).to.equal(\"drug service\");\r",
							"});\r",
							"\r",
							"pm.test('response data should be array', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson.response.data).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct key and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson).to.haveOwnProperty('service');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('request');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('response');\r",
							"    pm.expect(responseJson.response).to.haveOwnProperty('total');\r",
							"    pm.expect(responseJson.response).to.haveOwnProperty('data'); \r",
							"});\r",
							"\r",
							"pm.test(\"status should return success\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.status).equals('success');\r",
							"}) \r",
							"\r",
							"pm.test(\"response data should have correct key\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('id');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('image');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('title');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('product_url');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('description');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('indication');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('dose');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('compotition');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('attention');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('how_to_use');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('side_effect');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('product_class');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('package');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('manufactur');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('bpom');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('indication_contra');\r",
							"}) \r",
							"\r",
							"\r",
							"pm.test(\"response should have page\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.response).to.haveOwnProperty('page');\r",
							"}) \r",
							"\r",
							"pm.test(\"response should have pointing correct page\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.response.page.current).to.equal(1);\r",
							"    pm.expect(responseJson.response.page.next).to.equal(2);\r",
							"    pm.expect(responseJson.response.page.prev).to.equal(null);\r",
							"}) \r",
							"\r",
							"pm.test(\"response total data should equal to response data length\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.response.total).to.equal(responseJson.response.data.length);\r",
							"}) \r",
							"\r",
							"pm.test(`total data should equal to take query params`, () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.response.total).to.equal(parseInt(responseJson.request.take));\r",
							"}) \r",
							"\r",
							"pm.test(\"response should have page & take request query\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.request).to.haveOwnProperty(\"page\");\r",
							"    pm.expect(responseJson.request).to.haveOwnProperty(\"take\");\r",
							"}) "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{host}}:{{port}}/{{endpoint}}/drugs?page={{page}}&take={{take}}",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"{{endpoint}}",
						"drugs"
					],
					"query": [
						{
							"key": "page",
							"value": "{{page}}"
						},
						{
							"key": "take",
							"value": "{{take}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "drug only page (pagination)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 200 (OK)', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('service should be drug service', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.service).to.equal(\"drug service\");\r",
							"});\r",
							"\r",
							"pm.test('response data should be array', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson.response.data).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct key and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson).to.haveOwnProperty('service');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('request');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('response');\r",
							"    pm.expect(responseJson.response).to.haveOwnProperty('total');\r",
							"    pm.expect(responseJson.response).to.haveOwnProperty('data'); \r",
							"});\r",
							"\r",
							"pm.test(\"status should return success\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.status).equals('success');\r",
							"}) \r",
							"\r",
							"pm.test(\"response data should have correct key\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('id');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('image');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('title');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('product_url');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('description');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('indication');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('dose');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('compotition');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('attention');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('how_to_use');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('side_effect');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('product_class');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('package');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('manufactur');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('bpom');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('indication_contra');\r",
							"}) \r",
							"\r",
							"\r",
							"pm.test(\"response should have page\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.response).to.haveOwnProperty('page');\r",
							"}) \r",
							"\r",
							"pm.test(\"response should have pointing correct page\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.response.page.current).to.equal(1);\r",
							"    pm.expect(responseJson.response.page.next).to.equal(2);\r",
							"    pm.expect(responseJson.response.page.prev).to.equal(null);\r",
							"}) \r",
							"\r",
							"pm.test(\"response total data should equal to response data length\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.response.total).to.equal(responseJson.response.data.length);\r",
							"}) \r",
							"\r",
							"\r",
							"pm.test(\"response should have page & take request query\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.request).to.haveOwnProperty(\"page\");\r",
							"}) "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{host}}:{{port}}/{{endpoint}}/drugs?page={{page}}",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"{{endpoint}}",
						"drugs"
					],
					"query": [
						{
							"key": "page",
							"value": "{{page}}"
						},
						{
							"key": "take",
							"value": "{{take}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "drug only take (pagination)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 200 (OK)', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('service should be drug service', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.service).to.equal(\"drug service\");\r",
							"});\r",
							"\r",
							"pm.test('response data should be array', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson.response.data).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct key and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson).to.haveOwnProperty('service');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('request');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('response');\r",
							"    pm.expect(responseJson.response).to.haveOwnProperty('total');\r",
							"    pm.expect(responseJson.response).to.haveOwnProperty('data'); \r",
							"});\r",
							"\r",
							"pm.test(\"status should return success\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.status).equals('success');\r",
							"}) \r",
							"\r",
							"pm.test(\"response data should have correct key\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('id');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('image');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('title');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('product_url');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('description');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('indication');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('dose');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('compotition');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('attention');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('how_to_use');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('side_effect');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('product_class');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('package');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('manufactur');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('bpom');\r",
							"    pm.expect(responseJson.response.data[0]).to.haveOwnProperty('indication_contra');\r",
							"}) \r",
							"\r",
							"\r",
							"pm.test(\"response should have page\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.response).to.haveOwnProperty('page');\r",
							"}) \r",
							"\r",
							"pm.test(\"response should have pointing correct page\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.response.page.current).to.equal(1);\r",
							"    pm.expect(responseJson.response.page.next).to.equal(2);\r",
							"    pm.expect(responseJson.response.page.prev).to.equal(null);\r",
							"}) \r",
							"\r",
							"pm.test(\"response total data should equal to response data length\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.response.total).to.equal(responseJson.response.data.length);\r",
							"}) \r",
							"\r",
							"\r",
							"pm.test(\"response should have page & take request query\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.request).to.haveOwnProperty(\"take\");\r",
							"}) \r",
							"\r",
							"\r",
							"pm.test(\"total data should equal to take query params\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.response.total).to.equal(parseInt(responseJson.request.take));\r",
							"}) "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{host}}:{{port}}/{{endpoint}}/drugs?take={{only_take}}",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"{{endpoint}}",
						"drugs"
					],
					"query": [
						{
							"key": "page",
							"value": "{{page}}",
							"disabled": true
						},
						{
							"key": "take",
							"value": "{{only_take}}"
						}
					]
				}
			},
			"response": []
		}
	]
}